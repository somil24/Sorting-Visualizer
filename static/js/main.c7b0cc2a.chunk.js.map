{"version":3,"sources":["AboutSorting/SortingHome.js","AboutSorting/AboutInsertionSort.js","AboutSorting/AboutMergeSort.js","SortingAlgorithms/mergeSort.js","SortingAlgorithms/quickSort.js","AboutSorting/AboutQuickSort.js","SortingVisualizer2.0/SortingVisualizerBody.js","SortingAlgorithms/InsertionSort.js","SortingVisualizer2.0/Navbar.js","App.js","index.js"],"names":["SortingHome","AboutInsertionSort","AboutMergeSort","mergeSortAnimation","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","QuickSortAnimation","animation","quickSort","l","r","pi","pivot","temp","partion","AboutQuickSort","PRIMARY_COLOR","SortingVisualizerBody","state","resetArray","bind","this","window","addEventListener","Length","document","getElementById","offsetWidth","ArrayLength","lastVal","min","max","random","setState","console","log","Sort","getInsertionSortAnimation","arrayBars","getElementsByClassName","one","two","isChange","height1","height2","setTimeout","Barone","style","Bartwo","height","backgroundColor","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","barOne","bartwo","id","insertionSort","mergeSort","pathname","location","className","path","component","render","props","type","onClick","handleClick","map","value","idx","React","Component","Navbar","to","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-current","App","ReactDOM"],"mappings":"oTAceA,MAbf,WACI,OACI,gCACI,+CACA,kPCsBGC,MAzBf,WACI,OACI,gCACA,gDACI,0FAIZ,iFAGA,yFAGA,2MAGA,wDAEA,uBAFA,+BCYeC,MA9Bf,WACI,OACI,gCACI,4CACA,mEAGA,uCACA,oHAIA,4FAEC,+FAIA,yGAIA,8DACA,sDACA,6ECzBN,SAASC,EAAmBC,GAC/B,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OADAC,EAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,EAGT,SAASI,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAjB,CACA,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,GAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAG5BP,EAAWc,KAAK,CAACF,EAAGC,IAGpBb,EAAWc,KAAK,CAACF,EAAGC,IAChBX,EAAeU,IAAMV,EAAeW,IAGtCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAIhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAGpC,KAAOD,GAAKJ,GAGVR,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAElC,KAAOC,GAAKN,GAGVP,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KAvDlCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,ICnB7D,SAASgB,EAAmBjB,GAC/B,IAAMkB,EAAU,GAEhB,OADAC,EAAUnB,EAAM,EAAEA,EAAME,OAAO,EAAEgB,GAC1BA,EAGX,SAASC,EAAUnB,EAAMoB,EAAEC,EAAEH,GACzB,GAAGE,EAAEC,EAAE,CACH,IAAIC,EAMZ,SAAiBtB,EAAMoB,EAAEC,EAAEH,GAGvB,IAFA,IAAIK,EAAMvB,EAAMqB,GACZR,EAAEO,EAAE,EACAN,EAAEM,EAAEN,EAAEO,EAAEP,IACZ,GAAGd,EAAMc,GAAGS,EAAM,CACdV,IACA,IAAIW,EAAKxB,EAAMc,GACfd,EAAMc,GAAGd,EAAMa,GACfb,EAAMa,GAAGW,EACTN,EAAUH,KAAK,CAACF,EAAEC,EAAEd,EAAMa,GAAGb,EAAMc,KAG3C,IAAIU,EAAKxB,EAAMqB,GAKf,OAJArB,EAAMqB,GAAGrB,EAAMa,EAAE,GACjBb,EAAMa,EAAE,GAAGW,EACXN,EAAUH,KAAK,CAACF,EAAE,EAAEQ,EAAErB,EAAMa,EAAE,GAAGb,EAAMqB,KAEhCR,EAAE,EAvBEY,CAAQzB,EAAMoB,EAAEC,EAAEH,GACzBC,EAAUnB,EAAMoB,EAAEE,EAAG,EAAEJ,GACvBC,EAAUnB,EAAMsB,EAAG,EAAED,EAAEH,ICsBhBQ,MA9Bf,WACI,OACI,gCACI,4CACA,2CAEA,uBAFA,yDAIA,uBAJA,uFAMA,uBANA,6CAQA,uBARA,yCAUA,uBAVA,kEAYA,uBAZA,qEAcA,uBAdA,6EAgBA,uBAhBA,4EAkBA,uBAlBA,yDCONC,EAAc,YAECC,E,kDACjB,aAAc,IAAD,8BACT,gBACKC,MAAM,CACP7B,MAAM,IAEV,EAAK8B,WAAW,EAAKA,WAAWC,KAAhB,gBALP,E,gEAQTC,KAAKF,aACLG,OAAOC,iBAAiB,SAAUF,KAAKF,c,mCAMvC,IAAMK,EAAQC,SAASC,eAAe,WAAWC,YAC7CC,EAAY,EAAEC,EAAQ,IACvBL,GAAQ,KAAOA,GAAQ,KACtBI,EAAY,IACZC,EAAQ,KAEJL,EAAO,KAAOA,GAAQ,KAC1BI,EAAY,GACZC,EAAQ,KAGJL,EAAO,MAAKI,EAAY,GAC5BC,EAAQ,KAGZ,IADA,IAmHuBC,EAAIC,EAnHrB1C,EAAM,GACJa,EAAE,EAAEA,EAAE0B,EAAY1B,IACtBb,EAAMe,MAiHa0B,EAjHc,EAiHVC,EAjHYF,EAkHpC9B,KAAKC,MAAMD,KAAKiC,UAAUD,EAAID,EAAI,GAAGA,KAhHxCT,KAAKY,SAAS,CAAC5C,UACf6C,QAAQC,IAAIV,SAASC,eAAe,WAAWC,e,sCAK/C,IADA,IAAIpB,ECpDL,SAAmClB,GACtC,IAAMkB,EAAU,GAChB,OAAkB,IAAflB,EAAME,OAAkBF,GAK/B,SAAcA,EAAMkB,GAChB,IAAI,IAAIL,EAAE,EAAEA,EAAEb,EAAME,OAAOW,IACvB,IAAI,IAAIC,EAAED,EAAEC,EAAEd,EAAME,OAAOY,IACvB,GAAGd,EAAMa,KAAKb,EAAMc,GACpB,GAAGd,EAAMa,GAAGb,EAAMc,GAAG,CACjB,IAAIU,EAAKxB,EAAMa,GACfb,EAAMa,GAAGb,EAAMc,GACfd,EAAMc,GAAGU,EACTN,EAAUH,KAAK,CAACF,EAAEC,GAAE,EAAKd,EAAMa,GAAGb,EAAMc,UAEvCI,EAAUH,KAAK,CAACF,EAAEC,GAAE,EAAM,KAAK,OAd5CiC,CAAK/C,EAAMkB,GACJA,GDgDY8B,CAA0BhB,KAAKH,MAAM7B,OADzC,WAEHa,GACJ,IAAIoC,EAAUb,SAASc,uBAAuB,aAHvC,cAIgChC,EAAUL,GAJ1C,GAIFsC,EAJE,KAIEC,EAJF,KAIMC,EAJN,KAIeC,EAJf,KAIuBC,EAJvB,KAKJF,GACCG,YAAW,WACP,IAAIC,EAAOR,EAAUE,GAAKO,MACtBC,EAAOV,EAAUG,GAAKM,MAC1BD,EAAOG,OAAP,UAAiBN,EAAjB,MACAK,EAAOC,OAAP,UAAiBL,EAAjB,MACAE,EAAOI,gBAAgBlC,EACvBgC,EAAOE,gBAAgBlC,IAvDlB,EAwDPd,IAXFA,EAAE,EAAEA,EAAEK,EAAUhB,OAAOW,IAAK,EAA5BA,K,kCAkBZ,IADI,IAAIZ,EAAaF,EAAmBiC,KAAKH,MAAM7B,OADxC,WAEFa,GACP,IAAIoC,EAAYb,SAASc,uBAAuB,aAEhD,GADoBrC,EAAI,IAAM,EACX,CAAC,IAAD,cACYZ,EAAWY,GADvB,GACZiD,EADY,KACDC,EADC,KAEbC,EAAcf,EAAUa,GAAWJ,MACnCO,EAAchB,EAAUc,GAAWL,MACnCQ,EAAQrD,EAAI,IAAM,EAlER,MAkE8Bc,EAC5C6B,YAAW,WACTQ,EAAYH,gBAAkBK,EAC9BD,EAAYJ,gBAAkBK,IACzB,EAAJrD,QAEH2C,YAAW,WAAO,IAAD,cACcvD,EAAWY,GADzB,GACViD,EADU,KACCK,EADD,KAEGlB,EAAUa,GAAWJ,MAC3BE,OAAZ,UAAwBO,EAAxB,QACK,EAAJtD,IAjBEA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,kCAyBN,IADC,IAAIK,EAAUD,EAAmBe,KAAKH,MAAM7B,OADrC,WAEAa,GACP,IAAIoC,EAAYb,SAASc,uBAAuB,aAHzC,cAIiChC,EAAUL,GAJ3C,GAIEuD,EAJF,KAISC,EAJT,KAIgBf,EAJhB,KAIwBC,EAJxB,KAKHC,YAAW,WACPP,EAAUmB,GAAQV,MAAME,OAAxB,UAAkCN,EAAlC,MACAL,EAAUoB,GAAQX,MAAME,OAAxB,UAAkCL,EAAlC,QACA,GAAF1C,IANCA,EAAE,EAAEA,EAAEK,EAAUhB,OAAOW,IAAK,EAA5BA,K,kCAaCyD,GACA,mBAALA,EAAsBtC,KAAKuC,gBACjB,eAALD,EAAkBtC,KAAKwC,YAClB,eAALF,GAAkBtC,KAAKb,c,+BAQ1B,IAAD,OACGnB,EAAOgC,KAAKH,MAAZ7B,MACDyE,EAAWxC,OAAOyC,SAASD,SAEpC,OADG5B,QAAQC,IAAI2B,GACP,mCAEb,qBAAKE,UAAU,YAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,gBAAf,UACA,eAAC,IAAD,WACG,cAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWjF,IAC/B,cAAC,IAAD,CAAOgF,KAAK,iBAAiBC,UAAWhF,EAAoBiF,OAAQ,SAACC,GAAS,EAAKR,mBACnF,cAAC,IAAD,CAAOK,KAAK,aAAaC,UAAW/E,IACpC,cAAC,IAAD,CAAO8E,KAAK,aAAaC,UAAWnD,OAEtC,wBAAQsD,KAAK,SAASC,QAAS,kBAAI,EAAKnD,cAAc6C,UAAU,kBAAhE,4BACA,wBAAQK,KAAK,SAASL,UAAU,kBAAkBM,QAAS,kBAAI,EAAKC,YAAYT,IAAhF,qBAGD,qBAAKE,UAAU,wBAAwBL,GAAG,UAA1C,SACCtE,EAAMmF,KAAI,SAACC,EAAOC,GAAR,OACL,qBACEV,UAAU,YAEVjB,MAAO,CACLG,gBAAiBlC,EACjBiC,OAAO,GAAD,OAAKwB,EAAL,QAHHC,mB,GAlIkCC,IAAMC,W,WEiB1CC,MA5Bf,WACI,OACI,mCACP,qBAAKb,UAAU,8CAAf,SACC,sBAAKA,UAAU,kBAAf,UACE,cAAC,IAAD,CAAMA,UAAU,eAAec,GAAG,QAAlC,gCACA,wBAAQd,UAAU,iBAAiBK,KAAK,SAASU,iBAAe,WAAWC,iBAAe,qBAAqBC,gBAAc,oBAAoBC,gBAAc,QAAQC,aAAW,oBAAlL,SACE,sBAAMnB,UAAU,0BAElB,qBAAKA,UAAU,2BAA2BL,GAAG,oBAA7C,SACE,qBAAIK,UAAU,aAAd,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,kBAAkBoB,eAAa,OAAON,GAAI,CAAChB,SAAS,kBAApE,8BAEF,oBAAIE,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,kBAAkBc,GAAI,CAAChB,SAAS,cAAhD,2BAEF,oBAAIE,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,kBAAkBc,GAAI,CAAChB,SAAS,cAAhD,wCCPKuB,MATf,WACE,OACE,sBAAKrB,UAAU,MAAf,UACC,cAAC,EAAD,IACA,cAAC,EAAD,QCJLsB,IAASnB,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEF1C,SAASC,eAAe,W","file":"static/js/main.c7b0cc2a.chunk.js","sourcesContent":["import React from \"react\"\r\nfunction SortingHome(){\r\n    return(\r\n        <div>\r\n            <h1>About Sorting</h1>\r\n            <p>\r\n            The arrangement of data in a preferred order is called sorting in the data structure.\r\n            By sorting data, it is easier to search through it quickly and easily. \r\n            The simplest example of sorting is a dictionary.\r\n            </p>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default SortingHome","import React from \"react\"\r\n\r\nfunction AboutInsertionSort(){\r\n    return(\r\n        <div>\r\n        <h1>Insertion Sort</h1>\r\n            <p>\r\n            Algorithm-\r\nTo sort an array of size n in ascending order:\r\n</p>\r\n<p>\r\n1: Iterate from arr[1] to arr[n] over the array.\r\n</p>\r\n<p>\r\n2: Compare the current element (key) to its predecessor.\r\n</p>\r\n<p>\r\n3: If the key element is smaller than its predecessor, compare it to the elements before. Move the greater elements one position up to make space for the swapped element.\r\n</p>\r\n<p>\r\nTime Complexity: O(n*2)\r\n<br/>\r\nAuxiliary Space: O(1)\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\nexport default AboutInsertionSort","import React from \"react\";\r\nfunction AboutMergeSort(){\r\n    return(\r\n        <div>\r\n            <h1>Merge Sort</h1>\r\n            <p>\r\n                Algorithm- MergeSort(arr[], l,  r)\r\n            </p>         \r\n            <p>If r>l</p>\r\n            <p>\r\n            1. Find the middle point to divide the array into two halves:  \r\n             middle m = l+ (r-l)/2\r\n            </p>\r\n            <p>2. Call mergeSort for first half:   \r\n             Call mergeSort(arr, l, m)</p>\r\n             <p>\r\n             3. Call mergeSort for second half:\r\n             Call mergeSort(arr, m+1, r)\r\n             </p>\r\n             <p>\r\n             4. Merge the two halves sorted in step 2 and 3:\r\n             Call merge(arr, l, m, r)\r\n             </p>\r\n             <p>Time Complexity:Î¸(nLogn)</p>\r\n             <p>Auxiliary Space: O(n)</p>\r\n             <p>Algorithmic Paradigm: Divide and Conquer</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AboutMergeSort","export function mergeSortAnimation(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","export function QuickSortAnimation(array){\r\n    const animation=[];\r\n    quickSort(array,0,array.length-1,animation);\r\n    return animation;\r\n}\r\n\r\nfunction quickSort(array,l,r,animation){\r\n    if(l<r){\r\n        let pi=partion(array,l,r,animation);\r\n        quickSort(array,l,pi-1,animation);\r\n        quickSort(array,pi+1,r,animation);\r\n    }\r\n}\r\n\r\nfunction partion(array,l,r,animation){\r\n    let pivot=array[r];\r\n    let i=l-1;\r\n    for(let j=l;j<r;j++){\r\n        if(array[j]<pivot){\r\n            i++;\r\n            let temp=array[j];\r\n            array[j]=array[i];\r\n            array[i]=temp;\r\n            animation.push([i,j,array[i],array[j]]);\r\n        }\r\n    }\r\n    let temp=array[r];\r\n    array[r]=array[i+1];\r\n    array[i+1]=temp;\r\n    animation.push([i+1,r,array[i+1],array[r]]);\r\n\r\n    return i+1;\r\n}","import React from \"react\";\r\n\r\nfunction AboutQuickSort(){\r\n    return(\r\n        <div>\r\n            <h1>Quick Sort</h1>\r\n            <p>\r\n            Algorithm-\r\n            <br/>\r\n            Step 1 â Choose the highest index value has pivot\r\n            <br/>\r\n            Step 2 â Take two variables to point left and right of the list excluding pivot\r\n            <br/>\r\n            Step 3 â left points to the low index\r\n            <br/>\r\n            Step 4 â right points to the high\r\n            <br/>\r\n            Step 5 â while value at left is less than pivot move right\r\n            <br/>\r\n            Step 6 â while value at right is greater than pivot move left\r\n            <br/>\r\n            Step 7 â if both step 5 and step 6 does not match swap left and right\r\n            <br/>\r\n            Step 8 â if left â¥ right, the point where they met is new pivot\r\n            <br/>\r\n            Time Complexity: O(nLogn)\r\n            Space Complexity:O(1)\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AboutQuickSort;","import React from \"react\"\r\nimport \"./Sorting.css\"\r\nimport { Route, Switch, useParams } from 'react-router-dom';\r\nimport SortingHome from \"../AboutSorting/SortingHome\"\r\nimport AboutInsertionSort from \"../AboutSorting/AboutInsertionSort\";\r\nimport AboutMergeSort from \"../AboutSorting/AboutMergeSort\";\r\nimport {getInsertionSortAnimation} from \"../SortingAlgorithms/InsertionSort.js\";\r\nimport {mergeSortAnimation} from \"../SortingAlgorithms/mergeSort\"\r\nimport {QuickSortAnimation} from \"../SortingAlgorithms/quickSort\";\r\nimport AboutQuickSort from \"../AboutSorting/AboutQuickSort\";\r\nconst ANIMATION_SPEED_MS=1\r\n//var Length=100;\r\n\r\nconst PRIMARY_COLOR='turquoise'\r\nconst SECONDARY_COLOR='red'\r\nexport default class SortingVisualizerBody extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            array:[]\r\n        }\r\n        this.resetArray=this.resetArray.bind(this)\r\n    }\r\n    componentDidMount(){\r\n        this.resetArray();\r\n        window.addEventListener('resize', this.resetArray);\r\n        //Length=(document.getElementById(\"display\").offsetWidth)/8;\r\n    }\r\n    //window.addEventListener(\"resize\", this.resetArray());\r\n\r\n    resetArray(){\r\n        const Length=(document.getElementById(\"display\").offsetWidth);\r\n        let ArrayLength=0,lastVal=600;\r\n        if(Length<=800 && Length>=650){\r\n            ArrayLength=100;\r\n            lastVal=670;\r\n        }\r\n        else if(Length<650 && Length>=470){\r\n            ArrayLength=60;\r\n            lastVal=450;\r\n        }\r\n        \r\n        else if(Length<470){ArrayLength=30;\r\n            lastVal=200;}\r\n\r\n        const array=[];\r\n        for(let i=0;i<ArrayLength;i++){\r\n            array.push(randomIntFromInternal(5,lastVal));\r\n        }\r\n        this.setState({array})\r\n        console.log(document.getElementById(\"display\").offsetWidth)\r\n    }\r\n   \r\n    insertionSort(){\r\n        let animation =getInsertionSortAnimation(this.state.array);\r\n        for(let i=0;i<animation.length;i++){\r\n            let arrayBars=document.getElementsByClassName(\"array-bar\")\r\n            let [one,two,isChange,height1,height2]=animation[i]\r\n            if(isChange){\r\n                setTimeout(()=>{\r\n                    let Barone=arrayBars[one].style;\r\n                    let Bartwo=arrayBars[two].style;\r\n                    Barone.height=`${height1}px`;\r\n                    Bartwo.height=`${height2}px`;\r\n                    Barone.backgroundColor=PRIMARY_COLOR;\r\n                    Bartwo.backgroundColor=PRIMARY_COLOR;\r\n                },i*ANIMATION_SPEED_MS)\r\n            }\r\n            \r\n        }\r\n    }\r\n    mergeSort(){\r\n        let animations = mergeSortAnimation(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      let arrayBars = document.getElementsByClassName('array-bar');\r\n      let isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        let [barOneIdx, barTwoIdx] = animations[i];\r\n        let barOneStyle = arrayBars[barOneIdx].style;\r\n        let barTwoStyle = arrayBars[barTwoIdx].style;\r\n        let color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 5);\r\n      } else {\r\n        setTimeout(() => {\r\n          let [barOneIdx, newHeight] = animations[i];\r\n          let barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * 5);\r\n      }\r\n    }\r\n        \r\n    }\r\n\r\n    quickSort(){\r\n        let animation=QuickSortAnimation(this.state.array);\r\n       for(let i=0;i<animation.length;i++){\r\n        let arrayBars = document.getElementsByClassName('array-bar');\r\n            let [barOne,bartwo,height1,height2]=animation[i];\r\n            setTimeout(()=>{\r\n                arrayBars[barOne].style.height=`${height1}px`;\r\n                arrayBars[bartwo].style.height=`${height2}px`;\r\n            },i*10);\r\n        }\r\n        \r\n       //console.log(this.state.array.length);\r\n       //for(let i=0;i<animation.length;i++)console.log(animation[i]);\r\n    }\r\n\r\n    handleClick(id){\r\n        if(id===\"/insertionsort\")this.insertionSort();\r\n        else if(id===\"/mergeSort\")this.mergeSort();\r\n        else if(id===\"/quickSort\")this.quickSort();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render(){\r\n        const {array}=this.state;\r\n        const pathname = window.location.pathname\r\n        console.log(pathname)\r\n     return( <>\r\n\r\n<div className=\"container\">\r\n  <div className=\"row gx-10\">\r\n    <div className=\"col-md-3 Info\">\r\n    <Switch>\r\n       <Route path=\"/home\" component={SortingHome}/>\r\n       <Route path=\"/insertionsort\" component={AboutInsertionSort} render={(props)=>{this.insertionSort()}}/>\r\n       <Route path=\"/mergeSort\" component={AboutMergeSort}/>\r\n       <Route path=\"/quickSort\" component={AboutQuickSort}/>\r\n     </Switch>\r\n     <button type=\"button\" onClick={()=>this.resetArray()} className=\"btn btn-primary\">Generate Array</button>\r\n     <button type=\"button\" className=\"btn btn-success\" onClick={()=>this.handleClick(pathname)}>Sort</button>\r\n    </div>\r\n\r\n    <div className=\"col-md me-auto Diplay\" id=\"display\">\r\n    {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n        </>\r\n     )\r\n    }\r\n\r\n}\r\nfunction randomIntFromInternal(min,max){\r\n    return Math.floor(Math.random()*(max-min+1)+min);\r\n}","\r\n\r\nexport function getInsertionSortAnimation(array){\r\n    const animation=[];\r\n    if(array.length===1)return array;\r\n    Sort(array,animation);\r\n    return animation;\r\n}\r\n\r\nfunction Sort(array,animation){\r\n    for(let i=0;i<array.length;i++){\r\n        for(let j=i;j<array.length;j++){\r\n            if(array[i]===array[j])continue;\r\n            if(array[i]>array[j]){\r\n                let temp=array[i];\r\n                array[i]=array[j];\r\n                array[j]=temp;\r\n                animation.push([i,j,true,array[i],array[j]]);\r\n            }\r\n            else animation.push([i,j,false,null,null]);\r\n        }\r\n    }\r\n}","import React from \"react\"\r\nimport \"./Sorting.css\"\r\nimport {Link} from \"react-router-dom\"\r\n\r\nfunction Navbar(){\r\n    return(\r\n        <>\r\n <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/home\">Sorting Visualizer</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\r\n      <ul className=\"navbar-nav\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to={{pathname:\"/insertionsort\"}}>Insertion Sort</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" to={{pathname:\"/mergeSort\"}}>Merge Sort </Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" to={{pathname:\"/quickSort\"}}>Quick Sort </Link>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar","\nimport './App.css';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\nimport SortingVisualizerBody from \"./SortingVisualizer2.0/SortingVisualizerBody\"\nimport Navbar from \"./SortingVisualizer2.0/Navbar\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Navbar/>\n     <SortingVisualizerBody/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}