[{"D:\\Sorting Algo Project\\sorting2.0\\src\\index.js":"1","D:\\Sorting Algo Project\\sorting2.0\\src\\App.js":"2","D:\\Sorting Algo Project\\sorting2.0\\src\\reportWebVitals.js":"3","D:\\Sorting Algo Project\\sorting2.0\\src\\SortingVisualizer2.0\\SortingVisualizerBody.js":"4","D:\\Sorting Algo Project\\sorting2.0\\src\\SortingVisualizer2.0\\Navbar.js":"5","D:\\Sorting Algo Project\\sorting2.0\\src\\AboutSorting\\AboutInsertionSort.js":"6","D:\\Sorting Algo Project\\sorting2.0\\src\\SortingAlgorithms\\InsertionSort.js":"7","D:\\Sorting Algo Project\\sorting2.0\\src\\SortingAlgorithms\\mergeSort.js":"8","D:\\Sorting Algo Project\\sorting2.0\\src\\AboutSorting\\AboutMergeSort.js":"9","D:\\Sorting Algo Project\\sorting2.0\\src\\SortingAlgorithms\\quickSort.js":"10","D:\\Sorting Algo Project\\sorting2.0\\src\\AboutSorting\\AboutQuickSort.js":"11"},{"size":475,"mtime":1611224721217,"results":"12","hashOfConfig":"13"},{"size":354,"mtime":1611235009985,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":5462,"mtime":1613234808461,"results":"16","hashOfConfig":"13"},{"size":1234,"mtime":1613232719395,"results":"17","hashOfConfig":"13"},{"size":667,"mtime":1611227207136,"results":"18","hashOfConfig":"13"},{"size":628,"mtime":1611232183750,"results":"19","hashOfConfig":"13"},{"size":2881,"mtime":1613134758466,"results":"20","hashOfConfig":"13"},{"size":962,"mtime":1613125356682,"results":"21","hashOfConfig":"13"},{"size":810,"mtime":1613233553171,"results":"22","hashOfConfig":"13"},{"size":1016,"mtime":1613234760940,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1kfh6oa",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Sorting Algo Project\\sorting2.0\\src\\index.js",[],["49","50"],"D:\\Sorting Algo Project\\sorting2.0\\src\\App.js",[],"D:\\Sorting Algo Project\\sorting2.0\\src\\reportWebVitals.js",[],["51","52"],"D:\\Sorting Algo Project\\sorting2.0\\src\\SortingVisualizer2.0\\SortingVisualizerBody.js",["53"],"import React from \"react\"\r\nimport \"./Sorting.css\"\r\nimport { Route, Switch, useParams } from 'react-router-dom';\r\nimport AboutInsertionSort from \"../AboutSorting/AboutInsertionSort\";\r\nimport AboutMergeSort from \"../AboutSorting/AboutMergeSort\";\r\nimport {getInsertionSortAnimation} from \"../SortingAlgorithms/InsertionSort.js\";\r\nimport {mergeSortAnimation} from \"../SortingAlgorithms/mergeSort\"\r\nimport {QuickSortAnimation} from \"../SortingAlgorithms/quickSort\";\r\nimport AboutQuickSort from \"../AboutSorting/AboutQuickSort\";\r\nconst ANIMATION_SPEED_MS=1\r\n//var Length=100;\r\n\r\nconst PRIMARY_COLOR='turquoise'\r\nconst SECONDARY_COLOR='red'\r\nexport default class SortingVisualizerBody extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            array:[]\r\n        }\r\n        this.resetArray=this.resetArray.bind(this)\r\n    }\r\n    componentDidMount(){\r\n        this.resetArray();\r\n        window.addEventListener('resize', this.resetArray);\r\n        //Length=(document.getElementById(\"display\").offsetWidth)/8;\r\n    }\r\n    //window.addEventListener(\"resize\", this.resetArray());\r\n\r\n    resetArray(){\r\n        const Length=(document.getElementById(\"display\").offsetWidth);\r\n        let ArrayLength=0,lastVal=600;\r\n        if(Length<=800 && Length>=650){\r\n            ArrayLength=100;\r\n            lastVal=670;\r\n        }\r\n        else if(Length<650 && Length>=470){\r\n            ArrayLength=60;\r\n            lastVal=450;\r\n        }\r\n        \r\n        else if(Length<470){ArrayLength=30;\r\n            lastVal=200;}\r\n\r\n        const array=[];\r\n        for(let i=0;i<ArrayLength;i++){\r\n            array.push(randomIntFromInternal(5,lastVal));\r\n        }\r\n        this.setState({array})\r\n        console.log(document.getElementById(\"display\").offsetWidth)\r\n    }\r\n   \r\n    insertionSort(){\r\n        let animation =getInsertionSortAnimation(this.state.array);\r\n        for(let i=0;i<animation.length;i++){\r\n            let arrayBars=document.getElementsByClassName(\"array-bar\")\r\n            let [one,two,isChange,height1,height2]=animation[i]\r\n            if(isChange){\r\n                setTimeout(()=>{\r\n                    let Barone=arrayBars[one].style;\r\n                    let Bartwo=arrayBars[two].style;\r\n                    Barone.height=`${height1}px`;\r\n                    Bartwo.height=`${height2}px`;\r\n                    Barone.backgroundColor=PRIMARY_COLOR;\r\n                    Bartwo.backgroundColor=PRIMARY_COLOR;\r\n                },i*ANIMATION_SPEED_MS)\r\n            }\r\n            \r\n        }\r\n    }\r\n    mergeSort(){\r\n        let animations = mergeSortAnimation(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      let arrayBars = document.getElementsByClassName('array-bar');\r\n      let isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        let [barOneIdx, barTwoIdx] = animations[i];\r\n        let barOneStyle = arrayBars[barOneIdx].style;\r\n        let barTwoStyle = arrayBars[barTwoIdx].style;\r\n        let color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 5);\r\n      } else {\r\n        setTimeout(() => {\r\n          let [barOneIdx, newHeight] = animations[i];\r\n          let barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * 5);\r\n      }\r\n    }\r\n        \r\n    }\r\n\r\n    quickSort(){\r\n        let animation=QuickSortAnimation(this.state.array);\r\n       for(let i=0;i<animation.length;i++){\r\n        let arrayBars = document.getElementsByClassName('array-bar');\r\n            let [barOne,bartwo,height1,height2]=animation[i];\r\n            setTimeout(()=>{\r\n                arrayBars[barOne].style.height=`${height1}px`;\r\n                arrayBars[bartwo].style.height=`${height2}px`;\r\n            },i*10);\r\n        }\r\n        \r\n       //console.log(this.state.array.length);\r\n       //for(let i=0;i<animation.length;i++)console.log(animation[i]);\r\n    }\r\n\r\n    handleClick(id){\r\n        if(id===\"/insertionsort\")this.insertionSort();\r\n        else if(id===\"/mergeSort\")this.mergeSort();\r\n        else if(id===\"/quickSort\")this.quickSort();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render(){\r\n        const {array}=this.state;\r\n        const pathname = window.location.pathname\r\n        console.log(pathname)\r\n     return( <>\r\n\r\n<div className=\"container\">\r\n  <div className=\"row gx-10\">\r\n    <div className=\"col-md-3 Info\">\r\n    <Switch>\r\n       <Route path=\"/insertionsort\" component={AboutInsertionSort} render={(props)=>{this.insertionSort()}}/>\r\n       <Route path=\"/mergeSort\" component={AboutMergeSort}/>\r\n       <Route path=\"/quickSort\" component={AboutQuickSort}/>\r\n     </Switch>\r\n     <button type=\"button\" onClick={()=>this.resetArray()} className=\"btn btn-primary\">Generate Array</button>\r\n     <button type=\"button\" className=\"btn btn-success\" onClick={()=>this.handleClick(pathname)}>Sort</button>\r\n    </div>\r\n\r\n    <div className=\"col-md me-auto Diplay\" id=\"display\">\r\n    {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n        </>\r\n     )\r\n    }\r\n\r\n}\r\nfunction randomIntFromInternal(min,max){\r\n    return Math.floor(Math.random()*(max-min+1)+min);\r\n}","D:\\Sorting Algo Project\\sorting2.0\\src\\SortingVisualizer2.0\\Navbar.js",[],"D:\\Sorting Algo Project\\sorting2.0\\src\\AboutSorting\\AboutInsertionSort.js",[],"D:\\Sorting Algo Project\\sorting2.0\\src\\SortingAlgorithms\\InsertionSort.js",[],"D:\\Sorting Algo Project\\sorting2.0\\src\\SortingAlgorithms\\mergeSort.js",[],"D:\\Sorting Algo Project\\sorting2.0\\src\\AboutSorting\\AboutMergeSort.js",[],"D:\\Sorting Algo Project\\sorting2.0\\src\\SortingAlgorithms\\quickSort.js",[],"D:\\Sorting Algo Project\\sorting2.0\\src\\AboutSorting\\AboutQuickSort.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"54","replacedBy":"58"},{"ruleId":"56","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":3,"column":25,"nodeType":"62","messageId":"63","endLine":3,"endColumn":34},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],["64"],["65"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]